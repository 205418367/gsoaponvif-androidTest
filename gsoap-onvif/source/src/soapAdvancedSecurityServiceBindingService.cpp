/* soapAdvancedSecurityServiceBindingService.cpp
   Generated by gSOAP 2.8.17r from onvif.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapAdvancedSecurityServiceBindingService.h"

AdvancedSecurityServiceBindingService::AdvancedSecurityServiceBindingService()
{	this->soap = soap_new();
	this->own = true;
	AdvancedSecurityServiceBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

AdvancedSecurityServiceBindingService::AdvancedSecurityServiceBindingService(struct soap *_soap)
{	this->soap = _soap;
	this->own = false;
	AdvancedSecurityServiceBindingService_init(_soap->imode, _soap->omode);
}

AdvancedSecurityServiceBindingService::AdvancedSecurityServiceBindingService(soap_mode iomode)
{	this->soap = soap_new();
	this->own = true;
	AdvancedSecurityServiceBindingService_init(iomode, iomode);
}

AdvancedSecurityServiceBindingService::AdvancedSecurityServiceBindingService(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->own = true;
	AdvancedSecurityServiceBindingService_init(imode, omode);
}

AdvancedSecurityServiceBindingService::~AdvancedSecurityServiceBindingService()
{	if (this->own)
		soap_free(this->soap);
}

void AdvancedSecurityServiceBindingService::AdvancedSecurityServiceBindingService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"wsa", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL, NULL},
	{"wsdd", "http://schemas.xmlsoap.org/ws/2005/04/discovery", NULL, NULL},
	{"chan", "http://schemas.microsoft.com/ws/2005/02/duplex", NULL, NULL},
	{"wsa5", "http://www.w3.org/2005/08/addressing", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL},
	{"netrm", "http://schemas.microsoft.com/ws/2006/05/rm", NULL, NULL},
	{"wsrm", "http://docs.oasis-open.org/ws-rx/wsrm/200702", NULL, NULL},
	{"c14n", "http://www.w3.org/2001/10/xml-exc-c14n#", NULL, NULL},
	{"wsu", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd", NULL, NULL},
	{"xenc", "http://www.w3.org/2001/04/xmlenc#", NULL, NULL},
	{"wsc", "http://schemas.xmlsoap.org/ws/2005/02/sc", NULL, NULL},
	{"ds", "http://www.w3.org/2000/09/xmldsig#", NULL, NULL},
	{"wsse", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd", NULL},
	{"xmime", "http://tempuri.org/xmime.xsd", NULL, NULL},
	{"xop", "http://www.w3.org/2004/08/xop/include", NULL, NULL},
	{"tt", "http://www.onvif.org/ver10/schema", NULL, NULL},
	{"wsrfbf", "http://docs.oasis-open.org/wsrf/bf-2", NULL, NULL},
	{"wstop", "http://docs.oasis-open.org/wsn/t-1", NULL, NULL},
	{"wsrfr", "http://docs.oasis-open.org/wsrf/r-2", NULL, NULL},
	{"ns1", "http://www.onvif.org/ver10/advancedsecurity/wsdl", NULL, NULL},
	{"tdn", "http://www.onvif.org/ver10/network/wsdl", NULL, NULL},
	{"tds", "http://www.onvif.org/ver10/device/wsdl", NULL, NULL},
	{"tev", "http://www.onvif.org/ver10/events/wsdl", NULL, NULL},
	{"wsnt", "http://docs.oasis-open.org/wsn/b-2", NULL, NULL},
	{"timg", "http://www.onvif.org/ver20/imaging/wsdl", NULL, NULL},
	{"tmd", "http://www.onvif.org/ver10/deviceIO/wsdl", NULL, NULL},
	{"tptz", "http://www.onvif.org/ver20/ptz/wsdl", NULL, NULL},
	{"trt", "http://www.onvif.org/ver10/media/wsdl", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this->soap, namespaces);
}

void AdvancedSecurityServiceBindingService::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void AdvancedSecurityServiceBindingService::reset()
{	destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	AdvancedSecurityServiceBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
AdvancedSecurityServiceBindingService *AdvancedSecurityServiceBindingService::copy()
{	AdvancedSecurityServiceBindingService *dup = SOAP_NEW_COPY(AdvancedSecurityServiceBindingService);
	if (dup)
		soap_copy_context(dup->soap, this->soap);
	return dup;
}
#endif

int AdvancedSecurityServiceBindingService::soap_close_socket()
{	return soap_closesock(this->soap);
}

int AdvancedSecurityServiceBindingService::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

int AdvancedSecurityServiceBindingService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this->soap, string, detailXML);
}

int AdvancedSecurityServiceBindingService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

int AdvancedSecurityServiceBindingService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this->soap, string, detailXML);
}

int AdvancedSecurityServiceBindingService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

void AdvancedSecurityServiceBindingService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void AdvancedSecurityServiceBindingService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *AdvancedSecurityServiceBindingService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

void AdvancedSecurityServiceBindingService::soap_noheader()
{	this->soap->header = NULL;
}

void AdvancedSecurityServiceBindingService::soap_header(char *wsa__MessageID, struct wsa__Relationship *wsa__RelatesTo, struct wsa__EndpointReferenceType *wsa__From, struct wsa__EndpointReferenceType *wsa__ReplyTo, struct wsa__EndpointReferenceType *wsa__FaultTo, char *wsa__To, char *wsa__Action, struct wsdd__AppSequenceType *wsdd__AppSequence, char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance, struct wsrm__SequenceType *wsrm__Sequence, int __sizeAckRequested, struct wsrm__AckRequestedType *wsrm__AckRequested, int __sizeSequenceAcknowledgement, struct _wsrm__SequenceAcknowledgement *wsrm__SequenceAcknowledgement, struct wsrm__SequenceFaultType *wsrm__SequenceFault, struct _wsse__Security *wsse__Security)
{	::soap_header(this->soap);
	this->soap->header->wsa__MessageID = wsa__MessageID;
	this->soap->header->wsa__RelatesTo = wsa__RelatesTo;
	this->soap->header->wsa__From = wsa__From;
	this->soap->header->wsa__ReplyTo = wsa__ReplyTo;
	this->soap->header->wsa__FaultTo = wsa__FaultTo;
	this->soap->header->wsa__To = wsa__To;
	this->soap->header->wsa__Action = wsa__Action;
	this->soap->header->wsdd__AppSequence = wsdd__AppSequence;
	this->soap->header->wsa5__MessageID = wsa5__MessageID;
	this->soap->header->wsa5__RelatesTo = wsa5__RelatesTo;
	this->soap->header->wsa5__From = wsa5__From;
	this->soap->header->wsa5__ReplyTo = wsa5__ReplyTo;
	this->soap->header->wsa5__FaultTo = wsa5__FaultTo;
	this->soap->header->wsa5__To = wsa5__To;
	this->soap->header->wsa5__Action = wsa5__Action;
	this->soap->header->chan__ChannelInstance = chan__ChannelInstance;
	this->soap->header->wsrm__Sequence = wsrm__Sequence;
	this->soap->header->__sizeAckRequested = __sizeAckRequested;
	this->soap->header->wsrm__AckRequested = wsrm__AckRequested;
	this->soap->header->__sizeSequenceAcknowledgement = __sizeSequenceAcknowledgement;
	this->soap->header->wsrm__SequenceAcknowledgement = wsrm__SequenceAcknowledgement;
	this->soap->header->wsrm__SequenceFault = wsrm__SequenceFault;
	this->soap->header->wsse__Security = wsse__Security;
}

const SOAP_ENV__Header *AdvancedSecurityServiceBindingService::soap_header()
{	return this->soap->header;
}

int AdvancedSecurityServiceBindingService::run(int port)
{	if (soap_valid_socket(this->soap->master) || soap_valid_socket(bind(NULL, port, 100)))
	{	for (;;)
		{	if (!soap_valid_socket(accept()) || serve())
				return this->soap->error;
			soap_destroy(this->soap);
			soap_end(this->soap);
		}
	}
	else
		return this->soap->error;
	return SOAP_OK;
}

SOAP_SOCKET AdvancedSecurityServiceBindingService::bind(const char *host, int port, int backlog)
{	return soap_bind(this->soap, host, port, backlog);
}

SOAP_SOCKET AdvancedSecurityServiceBindingService::accept()
{	return soap_accept(this->soap);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int AdvancedSecurityServiceBindingService::ssl_accept()
{	return soap_ssl_accept(this->soap);
}
#endif

int AdvancedSecurityServiceBindingService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->soap->max_keep_alive;
#endif
	do
	{

#ifndef WITH_FASTCGI
		if (this->soap->max_keep_alive > 0 && !--k)
			this->soap->keep_alive = 0;
#endif

		if (soap_begin_serve(this->soap))
		{	if (this->soap->error >= SOAP_STOP)
				continue;
			return this->soap->error;
		}
		if (dispatch() || (this->soap->fserveloop && this->soap->fserveloop(this->soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this->soap);
#else
			return soap_send_fault(this->soap);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this->soap);
		soap_end(this->soap);
	} while (1);
#else
	} while (this->soap->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___ns1__GetServiceCapabilities(AdvancedSecurityServiceBindingService*);
static int serve___ns1__CreateRSAKeyPair(AdvancedSecurityServiceBindingService*);
static int serve___ns1__GetKeyStatus(AdvancedSecurityServiceBindingService*);
static int serve___ns1__GetPrivateKeyStatus(AdvancedSecurityServiceBindingService*);
static int serve___ns1__GetAllKeys(AdvancedSecurityServiceBindingService*);
static int serve___ns1__DeleteKey(AdvancedSecurityServiceBindingService*);
static int serve___ns1__CreatePKCS10CSR(AdvancedSecurityServiceBindingService*);
static int serve___ns1__CreateSelfSignedCertificate(AdvancedSecurityServiceBindingService*);
static int serve___ns1__UploadCertificate(AdvancedSecurityServiceBindingService*);
static int serve___ns1__GetCertificate(AdvancedSecurityServiceBindingService*);
static int serve___ns1__GetAllCertificates(AdvancedSecurityServiceBindingService*);
static int serve___ns1__DeleteCertificate(AdvancedSecurityServiceBindingService*);
static int serve___ns1__CreateCertificationPath(AdvancedSecurityServiceBindingService*);
static int serve___ns1__GetCertificationPath(AdvancedSecurityServiceBindingService*);
static int serve___ns1__GetAllCertificationPaths(AdvancedSecurityServiceBindingService*);
static int serve___ns1__DeleteCertificationPath(AdvancedSecurityServiceBindingService*);
static int serve___ns1__AddServerCertificateAssignment(AdvancedSecurityServiceBindingService*);
static int serve___ns1__RemoveServerCertificateAssignment(AdvancedSecurityServiceBindingService*);
static int serve___ns1__ReplaceServerCertificateAssignment(AdvancedSecurityServiceBindingService*);
static int serve___ns1__GetAssignedServerCertificates(AdvancedSecurityServiceBindingService*);

int AdvancedSecurityServiceBindingService::dispatch()
{	AdvancedSecurityServiceBindingService_init(this->soap->imode, this->soap->omode);
	soap_peek_element(this->soap);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:GetServiceCapabilities"))
		return serve___ns1__GetServiceCapabilities(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:CreateRSAKeyPair"))
		return serve___ns1__CreateRSAKeyPair(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:GetKeyStatus"))
		return serve___ns1__GetKeyStatus(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:GetPrivateKeyStatus"))
		return serve___ns1__GetPrivateKeyStatus(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:GetAllKeys"))
		return serve___ns1__GetAllKeys(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:DeleteKey"))
		return serve___ns1__DeleteKey(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:CreatePKCS10CSR"))
		return serve___ns1__CreatePKCS10CSR(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:CreateSelfSignedCertificate"))
		return serve___ns1__CreateSelfSignedCertificate(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:UploadCertificate"))
		return serve___ns1__UploadCertificate(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:GetCertificate"))
		return serve___ns1__GetCertificate(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:GetAllCertificates"))
		return serve___ns1__GetAllCertificates(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:DeleteCertificate"))
		return serve___ns1__DeleteCertificate(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:CreateCertificationPath"))
		return serve___ns1__CreateCertificationPath(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:GetCertificationPath"))
		return serve___ns1__GetCertificationPath(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:GetAllCertificationPaths"))
		return serve___ns1__GetAllCertificationPaths(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:DeleteCertificationPath"))
		return serve___ns1__DeleteCertificationPath(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:AddServerCertificateAssignment"))
		return serve___ns1__AddServerCertificateAssignment(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:RemoveServerCertificateAssignment"))
		return serve___ns1__RemoveServerCertificateAssignment(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:ReplaceServerCertificateAssignment"))
		return serve___ns1__ReplaceServerCertificateAssignment(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:GetAssignedServerCertificates"))
		return serve___ns1__GetAssignedServerCertificates(this);
	return this->soap->error = SOAP_NO_METHOD;
}

static int serve___ns1__GetServiceCapabilities(AdvancedSecurityServiceBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__GetServiceCapabilities soap_tmp___ns1__GetServiceCapabilities;
	_ns1__GetServiceCapabilitiesResponse ns1__GetServiceCapabilitiesResponse;
	ns1__GetServiceCapabilitiesResponse.soap_default(soap);
	soap_default___ns1__GetServiceCapabilities(soap, &soap_tmp___ns1__GetServiceCapabilities);
	if (!soap_get___ns1__GetServiceCapabilities(soap, &soap_tmp___ns1__GetServiceCapabilities, "-ns1:GetServiceCapabilities", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetServiceCapabilities(soap_tmp___ns1__GetServiceCapabilities.ns1__GetServiceCapabilities, &ns1__GetServiceCapabilitiesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__GetServiceCapabilitiesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetServiceCapabilitiesResponse.soap_put(soap, "ns1:GetServiceCapabilitiesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetServiceCapabilitiesResponse.soap_put(soap, "ns1:GetServiceCapabilitiesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__CreateRSAKeyPair(AdvancedSecurityServiceBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__CreateRSAKeyPair soap_tmp___ns1__CreateRSAKeyPair;
	_ns1__CreateRSAKeyPairResponse ns1__CreateRSAKeyPairResponse;
	ns1__CreateRSAKeyPairResponse.soap_default(soap);
	soap_default___ns1__CreateRSAKeyPair(soap, &soap_tmp___ns1__CreateRSAKeyPair);
	if (!soap_get___ns1__CreateRSAKeyPair(soap, &soap_tmp___ns1__CreateRSAKeyPair, "-ns1:CreateRSAKeyPair", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->CreateRSAKeyPair(soap_tmp___ns1__CreateRSAKeyPair.ns1__CreateRSAKeyPair, &ns1__CreateRSAKeyPairResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__CreateRSAKeyPairResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__CreateRSAKeyPairResponse.soap_put(soap, "ns1:CreateRSAKeyPairResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__CreateRSAKeyPairResponse.soap_put(soap, "ns1:CreateRSAKeyPairResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetKeyStatus(AdvancedSecurityServiceBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__GetKeyStatus soap_tmp___ns1__GetKeyStatus;
	_ns1__GetKeyStatusResponse ns1__GetKeyStatusResponse;
	ns1__GetKeyStatusResponse.soap_default(soap);
	soap_default___ns1__GetKeyStatus(soap, &soap_tmp___ns1__GetKeyStatus);
	if (!soap_get___ns1__GetKeyStatus(soap, &soap_tmp___ns1__GetKeyStatus, "-ns1:GetKeyStatus", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetKeyStatus(soap_tmp___ns1__GetKeyStatus.ns1__GetKeyStatus, &ns1__GetKeyStatusResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__GetKeyStatusResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetKeyStatusResponse.soap_put(soap, "ns1:GetKeyStatusResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetKeyStatusResponse.soap_put(soap, "ns1:GetKeyStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetPrivateKeyStatus(AdvancedSecurityServiceBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__GetPrivateKeyStatus soap_tmp___ns1__GetPrivateKeyStatus;
	_ns1__GetPrivateKeyStatusResponse ns1__GetPrivateKeyStatusResponse;
	ns1__GetPrivateKeyStatusResponse.soap_default(soap);
	soap_default___ns1__GetPrivateKeyStatus(soap, &soap_tmp___ns1__GetPrivateKeyStatus);
	if (!soap_get___ns1__GetPrivateKeyStatus(soap, &soap_tmp___ns1__GetPrivateKeyStatus, "-ns1:GetPrivateKeyStatus", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetPrivateKeyStatus(soap_tmp___ns1__GetPrivateKeyStatus.ns1__GetPrivateKeyStatus, &ns1__GetPrivateKeyStatusResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__GetPrivateKeyStatusResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetPrivateKeyStatusResponse.soap_put(soap, "ns1:GetPrivateKeyStatusResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetPrivateKeyStatusResponse.soap_put(soap, "ns1:GetPrivateKeyStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetAllKeys(AdvancedSecurityServiceBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__GetAllKeys soap_tmp___ns1__GetAllKeys;
	_ns1__GetAllKeysResponse ns1__GetAllKeysResponse;
	ns1__GetAllKeysResponse.soap_default(soap);
	soap_default___ns1__GetAllKeys(soap, &soap_tmp___ns1__GetAllKeys);
	if (!soap_get___ns1__GetAllKeys(soap, &soap_tmp___ns1__GetAllKeys, "-ns1:GetAllKeys", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAllKeys(soap_tmp___ns1__GetAllKeys.ns1__GetAllKeys, &ns1__GetAllKeysResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__GetAllKeysResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetAllKeysResponse.soap_put(soap, "ns1:GetAllKeysResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetAllKeysResponse.soap_put(soap, "ns1:GetAllKeysResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__DeleteKey(AdvancedSecurityServiceBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__DeleteKey soap_tmp___ns1__DeleteKey;
	_ns1__DeleteKeyResponse ns1__DeleteKeyResponse;
	ns1__DeleteKeyResponse.soap_default(soap);
	soap_default___ns1__DeleteKey(soap, &soap_tmp___ns1__DeleteKey);
	if (!soap_get___ns1__DeleteKey(soap, &soap_tmp___ns1__DeleteKey, "-ns1:DeleteKey", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->DeleteKey(soap_tmp___ns1__DeleteKey.ns1__DeleteKey, &ns1__DeleteKeyResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__DeleteKeyResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__DeleteKeyResponse.soap_put(soap, "ns1:DeleteKeyResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__DeleteKeyResponse.soap_put(soap, "ns1:DeleteKeyResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__CreatePKCS10CSR(AdvancedSecurityServiceBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__CreatePKCS10CSR soap_tmp___ns1__CreatePKCS10CSR;
	_ns1__CreatePKCS10CSRResponse ns1__CreatePKCS10CSRResponse;
	ns1__CreatePKCS10CSRResponse.soap_default(soap);
	soap_default___ns1__CreatePKCS10CSR(soap, &soap_tmp___ns1__CreatePKCS10CSR);
	if (!soap_get___ns1__CreatePKCS10CSR(soap, &soap_tmp___ns1__CreatePKCS10CSR, "-ns1:CreatePKCS10CSR", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->CreatePKCS10CSR(soap_tmp___ns1__CreatePKCS10CSR.ns1__CreatePKCS10CSR, &ns1__CreatePKCS10CSRResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__CreatePKCS10CSRResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__CreatePKCS10CSRResponse.soap_put(soap, "ns1:CreatePKCS10CSRResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__CreatePKCS10CSRResponse.soap_put(soap, "ns1:CreatePKCS10CSRResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__CreateSelfSignedCertificate(AdvancedSecurityServiceBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__CreateSelfSignedCertificate soap_tmp___ns1__CreateSelfSignedCertificate;
	_ns1__CreateSelfSignedCertificateResponse ns1__CreateSelfSignedCertificateResponse;
	ns1__CreateSelfSignedCertificateResponse.soap_default(soap);
	soap_default___ns1__CreateSelfSignedCertificate(soap, &soap_tmp___ns1__CreateSelfSignedCertificate);
	if (!soap_get___ns1__CreateSelfSignedCertificate(soap, &soap_tmp___ns1__CreateSelfSignedCertificate, "-ns1:CreateSelfSignedCertificate", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->CreateSelfSignedCertificate(soap_tmp___ns1__CreateSelfSignedCertificate.ns1__CreateSelfSignedCertificate, &ns1__CreateSelfSignedCertificateResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__CreateSelfSignedCertificateResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__CreateSelfSignedCertificateResponse.soap_put(soap, "ns1:CreateSelfSignedCertificateResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__CreateSelfSignedCertificateResponse.soap_put(soap, "ns1:CreateSelfSignedCertificateResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__UploadCertificate(AdvancedSecurityServiceBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__UploadCertificate soap_tmp___ns1__UploadCertificate;
	_ns1__UploadCertificateResponse ns1__UploadCertificateResponse;
	ns1__UploadCertificateResponse.soap_default(soap);
	soap_default___ns1__UploadCertificate(soap, &soap_tmp___ns1__UploadCertificate);
	if (!soap_get___ns1__UploadCertificate(soap, &soap_tmp___ns1__UploadCertificate, "-ns1:UploadCertificate", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->UploadCertificate(soap_tmp___ns1__UploadCertificate.ns1__UploadCertificate, &ns1__UploadCertificateResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__UploadCertificateResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__UploadCertificateResponse.soap_put(soap, "ns1:UploadCertificateResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__UploadCertificateResponse.soap_put(soap, "ns1:UploadCertificateResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetCertificate(AdvancedSecurityServiceBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__GetCertificate soap_tmp___ns1__GetCertificate;
	_ns1__GetCertificateResponse ns1__GetCertificateResponse;
	ns1__GetCertificateResponse.soap_default(soap);
	soap_default___ns1__GetCertificate(soap, &soap_tmp___ns1__GetCertificate);
	if (!soap_get___ns1__GetCertificate(soap, &soap_tmp___ns1__GetCertificate, "-ns1:GetCertificate", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetCertificate(soap_tmp___ns1__GetCertificate.ns1__GetCertificate, &ns1__GetCertificateResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__GetCertificateResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetCertificateResponse.soap_put(soap, "ns1:GetCertificateResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetCertificateResponse.soap_put(soap, "ns1:GetCertificateResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetAllCertificates(AdvancedSecurityServiceBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__GetAllCertificates soap_tmp___ns1__GetAllCertificates;
	_ns1__GetAllCertificatesResponse ns1__GetAllCertificatesResponse;
	ns1__GetAllCertificatesResponse.soap_default(soap);
	soap_default___ns1__GetAllCertificates(soap, &soap_tmp___ns1__GetAllCertificates);
	if (!soap_get___ns1__GetAllCertificates(soap, &soap_tmp___ns1__GetAllCertificates, "-ns1:GetAllCertificates", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAllCertificates(soap_tmp___ns1__GetAllCertificates.ns1__GetAllCertificates, &ns1__GetAllCertificatesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__GetAllCertificatesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetAllCertificatesResponse.soap_put(soap, "ns1:GetAllCertificatesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetAllCertificatesResponse.soap_put(soap, "ns1:GetAllCertificatesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__DeleteCertificate(AdvancedSecurityServiceBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__DeleteCertificate soap_tmp___ns1__DeleteCertificate;
	_ns1__DeleteCertificateResponse ns1__DeleteCertificateResponse;
	ns1__DeleteCertificateResponse.soap_default(soap);
	soap_default___ns1__DeleteCertificate(soap, &soap_tmp___ns1__DeleteCertificate);
	if (!soap_get___ns1__DeleteCertificate(soap, &soap_tmp___ns1__DeleteCertificate, "-ns1:DeleteCertificate", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->DeleteCertificate(soap_tmp___ns1__DeleteCertificate.ns1__DeleteCertificate, &ns1__DeleteCertificateResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__DeleteCertificateResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__DeleteCertificateResponse.soap_put(soap, "ns1:DeleteCertificateResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__DeleteCertificateResponse.soap_put(soap, "ns1:DeleteCertificateResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__CreateCertificationPath(AdvancedSecurityServiceBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__CreateCertificationPath soap_tmp___ns1__CreateCertificationPath;
	_ns1__CreateCertificationPathResponse ns1__CreateCertificationPathResponse;
	ns1__CreateCertificationPathResponse.soap_default(soap);
	soap_default___ns1__CreateCertificationPath(soap, &soap_tmp___ns1__CreateCertificationPath);
	if (!soap_get___ns1__CreateCertificationPath(soap, &soap_tmp___ns1__CreateCertificationPath, "-ns1:CreateCertificationPath", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->CreateCertificationPath(soap_tmp___ns1__CreateCertificationPath.ns1__CreateCertificationPath, &ns1__CreateCertificationPathResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__CreateCertificationPathResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__CreateCertificationPathResponse.soap_put(soap, "ns1:CreateCertificationPathResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__CreateCertificationPathResponse.soap_put(soap, "ns1:CreateCertificationPathResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetCertificationPath(AdvancedSecurityServiceBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__GetCertificationPath soap_tmp___ns1__GetCertificationPath;
	_ns1__GetCertificationPathResponse ns1__GetCertificationPathResponse;
	ns1__GetCertificationPathResponse.soap_default(soap);
	soap_default___ns1__GetCertificationPath(soap, &soap_tmp___ns1__GetCertificationPath);
	if (!soap_get___ns1__GetCertificationPath(soap, &soap_tmp___ns1__GetCertificationPath, "-ns1:GetCertificationPath", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetCertificationPath(soap_tmp___ns1__GetCertificationPath.ns1__GetCertificationPath, &ns1__GetCertificationPathResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__GetCertificationPathResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetCertificationPathResponse.soap_put(soap, "ns1:GetCertificationPathResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetCertificationPathResponse.soap_put(soap, "ns1:GetCertificationPathResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetAllCertificationPaths(AdvancedSecurityServiceBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__GetAllCertificationPaths soap_tmp___ns1__GetAllCertificationPaths;
	_ns1__GetAllCertificationPathsResponse ns1__GetAllCertificationPathsResponse;
	ns1__GetAllCertificationPathsResponse.soap_default(soap);
	soap_default___ns1__GetAllCertificationPaths(soap, &soap_tmp___ns1__GetAllCertificationPaths);
	if (!soap_get___ns1__GetAllCertificationPaths(soap, &soap_tmp___ns1__GetAllCertificationPaths, "-ns1:GetAllCertificationPaths", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAllCertificationPaths(soap_tmp___ns1__GetAllCertificationPaths.ns1__GetAllCertificationPaths, &ns1__GetAllCertificationPathsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__GetAllCertificationPathsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetAllCertificationPathsResponse.soap_put(soap, "ns1:GetAllCertificationPathsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetAllCertificationPathsResponse.soap_put(soap, "ns1:GetAllCertificationPathsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__DeleteCertificationPath(AdvancedSecurityServiceBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__DeleteCertificationPath soap_tmp___ns1__DeleteCertificationPath;
	_ns1__DeleteCertificationPathResponse ns1__DeleteCertificationPathResponse;
	ns1__DeleteCertificationPathResponse.soap_default(soap);
	soap_default___ns1__DeleteCertificationPath(soap, &soap_tmp___ns1__DeleteCertificationPath);
	if (!soap_get___ns1__DeleteCertificationPath(soap, &soap_tmp___ns1__DeleteCertificationPath, "-ns1:DeleteCertificationPath", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->DeleteCertificationPath(soap_tmp___ns1__DeleteCertificationPath.ns1__DeleteCertificationPath, &ns1__DeleteCertificationPathResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__DeleteCertificationPathResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__DeleteCertificationPathResponse.soap_put(soap, "ns1:DeleteCertificationPathResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__DeleteCertificationPathResponse.soap_put(soap, "ns1:DeleteCertificationPathResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__AddServerCertificateAssignment(AdvancedSecurityServiceBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__AddServerCertificateAssignment soap_tmp___ns1__AddServerCertificateAssignment;
	_ns1__AddServerCertificateAssignmentResponse ns1__AddServerCertificateAssignmentResponse;
	ns1__AddServerCertificateAssignmentResponse.soap_default(soap);
	soap_default___ns1__AddServerCertificateAssignment(soap, &soap_tmp___ns1__AddServerCertificateAssignment);
	if (!soap_get___ns1__AddServerCertificateAssignment(soap, &soap_tmp___ns1__AddServerCertificateAssignment, "-ns1:AddServerCertificateAssignment", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->AddServerCertificateAssignment(soap_tmp___ns1__AddServerCertificateAssignment.ns1__AddServerCertificateAssignment, &ns1__AddServerCertificateAssignmentResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__AddServerCertificateAssignmentResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__AddServerCertificateAssignmentResponse.soap_put(soap, "ns1:AddServerCertificateAssignmentResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__AddServerCertificateAssignmentResponse.soap_put(soap, "ns1:AddServerCertificateAssignmentResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__RemoveServerCertificateAssignment(AdvancedSecurityServiceBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__RemoveServerCertificateAssignment soap_tmp___ns1__RemoveServerCertificateAssignment;
	_ns1__RemoveServerCertificateAssignmentResponse ns1__RemoveServerCertificateAssignmentResponse;
	ns1__RemoveServerCertificateAssignmentResponse.soap_default(soap);
	soap_default___ns1__RemoveServerCertificateAssignment(soap, &soap_tmp___ns1__RemoveServerCertificateAssignment);
	if (!soap_get___ns1__RemoveServerCertificateAssignment(soap, &soap_tmp___ns1__RemoveServerCertificateAssignment, "-ns1:RemoveServerCertificateAssignment", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->RemoveServerCertificateAssignment(soap_tmp___ns1__RemoveServerCertificateAssignment.ns1__RemoveServerCertificateAssignment, &ns1__RemoveServerCertificateAssignmentResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__RemoveServerCertificateAssignmentResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__RemoveServerCertificateAssignmentResponse.soap_put(soap, "ns1:RemoveServerCertificateAssignmentResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__RemoveServerCertificateAssignmentResponse.soap_put(soap, "ns1:RemoveServerCertificateAssignmentResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__ReplaceServerCertificateAssignment(AdvancedSecurityServiceBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__ReplaceServerCertificateAssignment soap_tmp___ns1__ReplaceServerCertificateAssignment;
	_ns1__ReplaceServerCertificateAssignmentResponse ns1__ReplaceServerCertificateAssignmentResponse;
	ns1__ReplaceServerCertificateAssignmentResponse.soap_default(soap);
	soap_default___ns1__ReplaceServerCertificateAssignment(soap, &soap_tmp___ns1__ReplaceServerCertificateAssignment);
	if (!soap_get___ns1__ReplaceServerCertificateAssignment(soap, &soap_tmp___ns1__ReplaceServerCertificateAssignment, "-ns1:ReplaceServerCertificateAssignment", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->ReplaceServerCertificateAssignment(soap_tmp___ns1__ReplaceServerCertificateAssignment.ns1__ReplaceServerCertificateAssignment, &ns1__ReplaceServerCertificateAssignmentResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__ReplaceServerCertificateAssignmentResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__ReplaceServerCertificateAssignmentResponse.soap_put(soap, "ns1:ReplaceServerCertificateAssignmentResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__ReplaceServerCertificateAssignmentResponse.soap_put(soap, "ns1:ReplaceServerCertificateAssignmentResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetAssignedServerCertificates(AdvancedSecurityServiceBindingService *service)
{	struct soap *soap = service->soap;
	struct __ns1__GetAssignedServerCertificates soap_tmp___ns1__GetAssignedServerCertificates;
	_ns1__GetAssignedServerCertificatesResponse ns1__GetAssignedServerCertificatesResponse;
	ns1__GetAssignedServerCertificatesResponse.soap_default(soap);
	soap_default___ns1__GetAssignedServerCertificates(soap, &soap_tmp___ns1__GetAssignedServerCertificates);
	if (!soap_get___ns1__GetAssignedServerCertificates(soap, &soap_tmp___ns1__GetAssignedServerCertificates, "-ns1:GetAssignedServerCertificates", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAssignedServerCertificates(soap_tmp___ns1__GetAssignedServerCertificates.ns1__GetAssignedServerCertificates, &ns1__GetAssignedServerCertificatesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__GetAssignedServerCertificatesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetAssignedServerCertificatesResponse.soap_put(soap, "ns1:GetAssignedServerCertificatesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetAssignedServerCertificatesResponse.soap_put(soap, "ns1:GetAssignedServerCertificatesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
